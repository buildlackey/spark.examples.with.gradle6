/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package scalaTry

import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner

import scala.annotation.tailrec


class Merger[T]()(implicit e: T => Ordered[T]) {
  def compare(a: T, b: T): Unit = {
    if (a < b)
      println("a less")
    else
      println("a NOT less")
  }

  def merge(a: List[T], b: List[T]): List[T] = {
    (a,b) match{
      case (Nil,Nil) =>
        Nil
      case (a1::tail, Nil) =>
        a1::tail
      case (Nil, b1::tail) =>
        b1::tail
      case (a1::tail1, b1::tail2) =>
        if (a1 < b1) {
          a1::b1::merge(tail1,tail2)
        } else {
          b1::a1::merge(tail1,tail2)
        }
      case default =>
        throw new IllegalStateException("Should never get here")
    }
  }



  def merge2(a: List[T], b: List[T]): List[T] = {
    @scala.annotation.tailrec
    def merge2(a: List[T], b: List[T], prefixSoFar: List[T]): List[T] = {
      (a,b) match{
        case (Nil,Nil) =>
          Nil
        case (a1::tail, Nil) =>
          prefixSoFar ::: a1 :: tail
        case (Nil, b1::tail) =>
          prefixSoFar ::: b1 :: tail
        case (a1::tail1, b1::tail2) =>
          if (a1 < b1) {
            val value: List[T] = prefixSoFar ::: a1 :: b1 :: Nil
            merge2(tail1, tail2, value )
          } else {
            val value: List[T] = prefixSoFar ::: b1 :: a1 :: Nil
            merge2(tail1, tail2, value )
          }
        case default =>
          throw new IllegalStateException("Should never get here")
      }
    }

    merge2(a, b, Nil)
  }
}

@RunWith(classOf[JUnitRunner])
class MergeTest extends AnyFunSuite {

  type MergeStringLists = (List[String], List[String]) => List[String]
  type MergeIntLists = (List[Int], List[Int]) => List[Int]

  def doMergeTest (fun1: MergeStringLists, fun2: MergeIntLists)= {
    var res = fun1(List[String](), List[String]())
    assert(res.equals(List[String]()))

    res = fun1(List[String](), "foo" :: List[String]())
    assert(res.equals(List[String]("foo")))


    var res2: List[Int] = fun2(2 :: List[Int](), 5 :: List[Int]())
    assert(res2.equals(List[Int](2, 5)))

    res2 = fun2(5 :: Nil, 2 :: Nil)
    assert(res2.equals(List[Int](2, 5)))

    res2 = fun2(5 :: 6 :: Nil, 6 :: Nil)
    assert(res2.equals(List[Int](5, 6, 6)))

    res2 = fun2(6 :: Nil, 5 :: 6 :: Nil)
    assert(res2.equals(List[Int](5, 6, 6)))


    res2 = fun2(5 :: 6 :: Nil, 4 :: 6 :: Nil)
    assert(res2.equals(List[Int](4, 5, 6, 6)))

    res2 = fun2(3 :: 6 :: Nil, 5 :: 6 :: Nil)
    assert(res2.equals(List[Int](3, 5, 6, 6)))
  }

  test("merging works") {
    val fun1: MergeStringLists = (list1: List[String], list2: List[String]) => new Merger[String]().merge(list1, list2)
    val fun2: MergeIntLists = (list1: List[Int], list2: List[Int]) => new Merger[Int]().merge(list1, list2)
    doMergeTest(fun1, fun2)

  }
}
